worker_processes auto;

env BACKEND_V1_HOST;
env BACKEND_V1_PORT;
env BACKEND_V2_HOST;
env BACKEND_V2_PORT;
env SPLIT_PERCENTAGE;
env HASH_STRATEGY;

events {
    worker_connections 1024;
}

http {
    lua_need_request_body on;
    resolver 127.0.0.11 ipv6=off;

    server {
        listen 80;
        server_name _;

        location / {
            content_by_lua_block {
                local http = require("resty.http")
                local hash_strategy = os.getenv("HASH_STRATEGY") or "ip"
                local split = tonumber(os.getenv("SPLIT_PERCENTAGE")) or 50
                local v1_host = os.getenv("BACKEND_V1_HOST") or "backend-v1"
                local v1_port = os.getenv("BACKEND_V1_PORT") or "8080"
                local v2_host = os.getenv("BACKEND_V2_HOST") or "backend-v2"
                local v2_port = os.getenv("BACKEND_V2_PORT") or "8080"

                local user_id = ngx.req.get_headers()["X-User-Id"]
                local remote_addr = ngx.req.get_headers()["X-Forwarded-For"] or ngx.var.remote_addr or "unknown"
                local hash_key

                if hash_strategy == "user_id" then
                    hash_key = user_id or remote_addr
                elseif hash_strategy == "jwt" then
                    -- JWT-based routing: extract user id (sub) from JWT in Authorization header
                    local jwt = require "resty.jwt"
                    local auth_header = ngx.req.get_headers()["Authorization"]
                    local jwt_user_id
                    if auth_header and auth_header:find("Bearer ") == 1 then
                        local token = auth_header:sub(8)
                        local jwt_obj = jwt:load_jwt(token)
                        if jwt_obj and jwt_obj.valid and jwt_obj.payload and jwt_obj.payload.sub then
                            jwt_user_id = jwt_obj.payload.sub
                        end
                    end
                    hash_key = jwt_user_id or remote_addr
                else
                    hash_key = remote_addr
                end

                local hash = ngx.crc32_short(hash_key)
                local percent = hash % 100

                local backend_url, backend
                if percent < split then
                    backend_url = "http://" .. v2_host .. ":" .. v2_port
                    backend = "v2"
                else
                    backend_url = "http://" .. v1_host .. ":" .. v1_port
                    backend = "v1"
                end

                ngx.header["X-Debug-Choice"] = backend
                ngx.header["X-Debug-Backend"] = backend_url
                ngx.header["X-Debug-Percent"] = tostring(percent)
                ngx.header["X-Debug-Split"] = tostring(split)
                ngx.header["X-Debug-Hash-Strategy"] = hash_strategy
                ngx.header["X-Debug-Hash-Key"] = hash_key

                local httpc = http.new()
                local res, err = httpc:request_uri(backend_url .. ngx.var.request_uri, {
                    method = ngx.req.get_method(),
                    body = ngx.req.get_body_data(),
                    headers = {
                        ["Content-Type"] = ngx.req.get_headers()["Content-Type"],
                        ["X-Forwarded-For"] = ngx.var.remote_addr,
                        ["X-Forwarded-Proto"] = ngx.var.scheme,
                    }
                })

                if not res then
                    ngx.status = 502
                    ngx.say("Backend error: ", err)
                    return
                end

                ngx.status = res.status
                for k, v in pairs(res.headers) do
                    if k ~= "Transfer-Encoding" and k ~= "Connection" then
                        ngx.header[k] = v
                    end
                end

                ngx.say(res.body)
            }
        }
    }
}
